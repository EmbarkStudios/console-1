//! Bindings generated by `minwin` 0.1.0
#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    clippy::upper_case_acronyms
)]
::windows_targets::link!(
    "kernel32.dll" "system" fn FillConsoleOutputAttribute(hConsoleOutput : HANDLE,
    wAttribute : u16, nLength : u32, dwWriteCoord : COORD, lpNumberOfAttrsWritten : * mut
    u32) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn FillConsoleOutputCharacterA(hConsoleOutput : HANDLE,
    cCharacter : u8, nLength : u32, dwWriteCoord : COORD, lpNumberOfCharsWritten : * mut
    u32) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn GetConsoleCursorInfo(hConsoleOutput : HANDLE,
    lpConsoleCursorInfo : * mut CONSOLE_CURSOR_INFO) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn GetConsoleMode(hConsoleHandle : HANDLE, lpMode : * mut
    CONSOLE_MODE) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn GetConsoleScreenBufferInfo(hConsoleOutput : HANDLE,
    lpConsoleScreenBufferInfo : * mut CONSOLE_SCREEN_BUFFER_INFO) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn GetFileInformationByHandleEx(hFile : HANDLE,
    FileInformationClass : FILE_INFO_BY_HANDLE_CLASS, lpFileInformation : * mut
    ::core::ffi::c_void, dwBufferSize : u32) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn GetNumberOfConsoleInputEvents(hConsoleInput : HANDLE,
    lpNumberOfEvents : * mut u32) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn GetStdHandle(nStdHandle : STD_HANDLE) -> HANDLE
);
::windows_targets::link!(
    "kernel32.dll" "system" fn ReadConsoleInputW(hConsoleInput : HANDLE, lpBuffer : * mut
    INPUT_RECORD, nLength : u32, lpNumberOfEventsRead : * mut u32) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn SetConsoleCursorInfo(hConsoleOutput : HANDLE,
    lpConsoleCursorInfo : * const CONSOLE_CURSOR_INFO) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn SetConsoleCursorPosition(hConsoleOutput : HANDLE,
    dwCursorPosition : COORD) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn SetConsoleMode(hConsoleHandle : HANDLE, dwMode :
    CONSOLE_MODE) -> BOOL
);
::windows_targets::link!(
    "kernel32.dll" "system" fn SetConsoleTitleW(lpConsoleTitle : PCWSTR) -> BOOL
);
pub const KEY_EVENT: u32 = 1;
pub const MAX_PATH: u32 = 260;
pub type BOOL = i32;
pub type CONSOLE_CHARACTER_ATTRIBUTES = u16;
#[repr(C)]
pub struct CONSOLE_CURSOR_INFO {
    pub dwSize: u32,
    pub bVisible: BOOL,
}
pub type CONSOLE_MODE = u32;
#[repr(C)]
pub struct CONSOLE_SCREEN_BUFFER_INFO {
    pub dwSize: COORD,
    pub dwCursorPosition: COORD,
    pub wAttributes: CONSOLE_CHARACTER_ATTRIBUTES,
    pub srWindow: SMALL_RECT,
    pub dwMaximumWindowSize: COORD,
}
#[repr(C)]
pub struct COORD {
    pub X: i16,
    pub Y: i16,
}
impl ::core::marker::Copy for COORD {}
impl ::core::clone::Clone for COORD {
    fn clone(&self) -> Self {
        *self
    }
}
pub type FILE_INFO_BY_HANDLE_CLASS = i32;
pub const FileNameInfo: FILE_INFO_BY_HANDLE_CLASS = 2;
#[repr(C)]
pub struct FILE_NAME_INFO {
    pub FileNameLength: u32,
    pub FileName: [u16; 1],
}
#[repr(C)]
pub struct FOCUS_EVENT_RECORD {
    pub bSetFocus: BOOL,
}
pub type HANDLE = isize;
pub const INVALID_HANDLE_VALUE: HANDLE = -1;
#[repr(C)]
pub struct INPUT_RECORD {
    pub EventType: u16,
    pub Event: INPUT_RECORD_0,
}
#[repr(C)]
pub union INPUT_RECORD_0 {
    pub KeyEvent: ::std::mem::ManuallyDrop<KEY_EVENT_RECORD>,
    pub MouseEvent: ::std::mem::ManuallyDrop<MOUSE_EVENT_RECORD>,
    pub WindowBufferSizeEvent: ::std::mem::ManuallyDrop<WINDOW_BUFFER_SIZE_RECORD>,
    pub MenuEvent: ::std::mem::ManuallyDrop<MENU_EVENT_RECORD>,
    pub FocusEvent: ::std::mem::ManuallyDrop<FOCUS_EVENT_RECORD>,
}
#[repr(C)]
pub struct KEY_EVENT_RECORD {
    pub bKeyDown: BOOL,
    pub wRepeatCount: u16,
    pub wVirtualKeyCode: u16,
    pub wVirtualScanCode: u16,
    pub uChar: KEY_EVENT_RECORD_0,
    pub dwControlKeyState: u32,
}
#[repr(C)]
pub union KEY_EVENT_RECORD_0 {
    pub UnicodeChar: u16,
    pub AsciiChar: u8,
}
#[repr(C)]
pub struct MENU_EVENT_RECORD {
    pub dwCommandId: u32,
}
#[repr(C)]
pub struct MOUSE_EVENT_RECORD {
    pub dwMousePosition: COORD,
    pub dwButtonState: u32,
    pub dwControlKeyState: u32,
    pub dwEventFlags: u32,
}
pub type PCWSTR = *const u16;
#[repr(C)]
pub struct SMALL_RECT {
    pub Left: i16,
    pub Top: i16,
    pub Right: i16,
    pub Bottom: i16,
}
pub type STD_HANDLE = u32;
pub const STD_ERROR_HANDLE: STD_HANDLE = 4294967284;
pub const STD_OUTPUT_HANDLE: STD_HANDLE = 4294967285;
pub const STD_INPUT_HANDLE: STD_HANDLE = 4294967286;
pub type VIRTUAL_KEY = u16;
pub const VK_BACK: VIRTUAL_KEY = 8;
pub const VK_TAB: VIRTUAL_KEY = 9;
pub const VK_RETURN: VIRTUAL_KEY = 13;
pub const VK_SHIFT: VIRTUAL_KEY = 16;
pub const VK_MENU: VIRTUAL_KEY = 18;
pub const VK_ESCAPE: VIRTUAL_KEY = 27;
pub const VK_END: VIRTUAL_KEY = 35;
pub const VK_HOME: VIRTUAL_KEY = 36;
pub const VK_LEFT: VIRTUAL_KEY = 37;
pub const VK_UP: VIRTUAL_KEY = 38;
pub const VK_RIGHT: VIRTUAL_KEY = 39;
pub const VK_DOWN: VIRTUAL_KEY = 40;
pub const VK_DELETE: VIRTUAL_KEY = 46;
#[repr(C)]
pub struct WINDOW_BUFFER_SIZE_RECORD {
    pub dwSize: COORD,
}
